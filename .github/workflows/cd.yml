name: Continuous Deployment

# Trigger the CD pipeline only when pushing to the main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get Access Token
      - id: get-access-token
        name: Get Access Token
        env:
          ACCESS_TOKEN_URL: ${{ secrets.ACCESS_TOKEN_URL }}
          AUTH_CLIENT_ID: ${{ secrets.AUTH_CLIENT_ID }}
          AUTH_CLIENT_SECRET: ${{ secrets.AUTH_CLIENT_SECRET }}
          AUTH_AUDIENCE: ${{ secrets.AUTH_AUDIENCE }}
        run: |
          auth_response=$((curl --request POST \
          --url "$ACCESS_TOKEN_URL" \
          --header 'content-type: application/json' \
          --data '{"client_id":"$AUTH_CLIENT_ID","client_secret":"$AUTH_CLIENT_SECRET","audience":"$AUTH_AUDIENCE","grant_type":"client_credentials"}))
          echo "::add-mask::$auth_response"
          echo "auth-response=$auth_response" >> "$GITHUB_OUTPUT"
      # Step 2: Parse Access Token
      - id: parse-access-token
        name: Parse Access Token
        run: |
          access_token=${{fromJson(steps.get-access-token.outputs.auth-response).access_token}}
          echo "::add-mask::$access_token"
          echo "access-token=$access_token" >> "$GITHUB_OUTPUT"
      # Step 3: Deploy to Production
      - id: deploy-to-production
        name: Deploy to Production
        env:
          SERVER_MANAGER_SERVICE_URL: ${{ secrets.SERVER_MANAGER_SERVICE_URL }}
          SERVER_ID: ${{ secrets.SERVER_ID }}
        run: |
          curl --request POST \
          --url $SERVER_MANAGER_SERVICE_URL/servers/$SERVER_ID/update/ \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ steps.parse-access-token.outputs.access-token }}' \
          --data '{}''
